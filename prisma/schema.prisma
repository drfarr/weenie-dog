// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withMiddleware = false
  withShield     = false
  contextPath    = "lib/trpc/context"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
  Hotspot       Hotspot[]
  ProjectView   ProjectView[]
  Project       Project[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Todo {
  id      String  @id @default(cuid())
  content String?
  name    String  @default("")
  done    Boolean @default(false)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("todos")
}

model Hotspot {
  id            String       @id @default(cuid())
  userId        String       @map("user_id")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  description   String?
  x             String?
  y             String?
  title         String       @default("")
  updatedAt     DateTime     @updatedAt
  createdAt     DateTime     @default(now())
  projectView   ProjectView? @relation(fields: [projectViewId], references: [id])
  projectViewId String?
}

model ProjectView {
  id          String    @id @default(cuid())
  resourceUrl String?   @map("resource_url")
  hotspots    Hotspot[]
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Project {
  id          String  @id @default(cuid())
  description String?
  title       String  @default("")

  projectViews ProjectView[]
  userId       String        @map("user_id")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("project")
}
